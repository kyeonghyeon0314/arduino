#define H \
  { \
      { 1, 1, 0, 0, 0, 0, 1, 1 }, \
      { 1, 1, 0, 0, 0, 0, 1, 1 }, \
      { 1, 1, 0, 0, 0, 0, 1, 1 }, \
      { 1, 1, 1, 1, 1, 1, 1, 1 }, \
      { 1, 1, 1, 1, 1, 1, 1, 1 }, \
      { 1, 1, 0, 0, 0, 0, 1, 1 }, \
      { 1, 1, 0, 0, 0, 0, 1, 1 }, \
      { 1, 1, 0, 0, 0, 0, 1, 1 }, \
  }
#define E \
  { \
      { 1, 1, 1, 1, 1, 1, 1, 1 }, \
      { 1, 1, 0, 0, 0, 0, 0, 0 }, \
      { 1, 1, 0, 0, 0, 0, 0, 0 }, \
      { 1, 1, 1, 1, 1, 1, 1, 0 }, \
      { 1, 1, 1, 1, 1, 1, 1, 0 }, \
      { 1, 1, 0, 0, 0, 0, 0, 0 }, \
      { 1, 1, 0, 0, 0, 0, 0, 0 }, \
      { 1, 1, 1, 1, 1, 1, 1, 1 }, \
  }
#define L \
  { \
      { 1, 1, 0, 0, 0, 0, 0, 0 }, \
      { 1, 1, 0, 0, 0, 0, 0, 0 }, \
      { 1, 1, 0, 0, 0, 0, 0, 0 }, \
      { 1, 1, 0, 0, 0, 0, 0, 0 }, \
      { 1, 1, 0, 0, 0, 0, 0, 0 }, \
      { 1, 1, 0, 0, 0, 0, 0, 0 }, \
      { 1, 1, 1, 1, 1, 1, 1, 1 }, \
      { 1, 1, 1, 1, 1, 1, 1, 1 }, \
  }
#define O \
  { \
      { 0, 0, 1, 1, 1, 1, 0, 0 }, \
      { 0, 1, 1, 0, 0, 1, 1, 0 }, \
      { 1, 1, 0, 0, 0, 0, 1, 1 }, \
      { 1, 1, 0, 0, 0, 0, 1, 1 }, \
      { 1, 1, 0, 0, 0, 0, 1, 1 }, \
      { 1, 1, 0, 0, 0, 0, 1, 1 }, \
      { 0, 1, 1, 0, 0, 1, 1, 0 }, \
      { 0, 0, 1, 1, 1, 1, 0, 0 }, \
  }
#define W \
  { \
      { 1, 1, 0, 0, 0, 0, 1, 1 }, \
      { 1, 1, 0, 1, 1, 0, 1, 1 }, \
      { 1, 1, 0, 1, 1, 0, 1, 1 }, \
      { 1, 1, 0, 1, 1, 0, 1, 1 }, \
      { 1, 1, 1, 1, 1, 1, 1, 1 }, \
      { 0, 1, 1, 1, 1, 1, 1, 0 }, \
      { 0, 1, 1, 0, 0, 1, 1, 0 }, \
      { 0, 1, 1, 0, 0, 1, 1, 0 }, \
  }
#define R \
  { \
      { 1, 1, 1, 1, 1, 1, 1, 0 },\ 
      { 1, 1, 0, 0, 0, 0, 1, 1 }, \
      { 1, 1, 0, 0, 0, 0, 1, 1 }, \
      { 1, 1, 1, 1, 1, 1, 1, 0 }, \
      { 1, 1, 1, 1, 1, 1, 0, 0 }, \
      { 1, 1, 0, 0, 1, 1, 0, 0 }, \
      { 1, 1, 0, 0, 0, 1, 1, 0 }, \
      { 1, 1, 0, 0, 0, 0, 1, 1 }, \
  }
#define D \
  { \
      { 1, 1, 1, 1, 1, 1, 0, 0 }, \
      { 1, 1, 1, 1, 1, 1, 1, 0 }, \
      { 1, 1, 0, 0, 0, 1, 1, 1 }, \
      { 1, 1, 0, 0, 0, 0, 1, 1 }, \
      { 1, 1, 0, 0, 0, 0, 1, 1 }, \
      { 1, 1, 0, 0, 0, 1, 1, 1 }, \
      { 1, 1, 1, 1, 1, 1, 1, 0 }, \
      { 1, 1, 1, 1, 1, 1, 0, 0 }, \
  }

#define SPACE \
  { \
      { 0, 0, 0, 0, 0, 0, 0, 0 }, \
      { 0, 0, 0, 0, 0, 0, 0, 0 }, \
      { 0, 0, 0, 0, 0, 0, 0, 0 }, \
      { 0, 0, 0, 0, 0, 0, 0, 0 }, \
      { 0, 0, 0, 0, 0, 0, 0, 0 }, \
      { 0, 0, 0, 0, 0, 0, 0, 0 }, \
      { 0, 0, 0, 0, 0, 0, 0, 0 }, \
      { 0, 0, 0, 0, 0, 0, 0, 0 }, \
  }

int cols[8] = { 9, 3, 2, 12, 15, 11, 7, 6 };    // C1, C2, C3, C4, C5, C6, C7, C8
int rows[8] = { 13, 8, 17, 10, 5, 16, 4, 14 };  // R1, R2, R3, R4, R5, R6, R7, R8

unsigned long startTime = 0;
const int numPatterns = 11;
byte patterns[numPatterns][8][8] = { H, E, L, L, O, W, O, R, L, D, SPACE };

void setup() {
  for (int i = 0; i < 8; i++) {
    pinMode(rows[i], OUTPUT);
    pinMode(cols[i], OUTPUT);
  }
}

void loop() {
  for (byte i = 0; i <= (numPatterns - 1); i++, startTime = millis()) {  // 전체 칸수, 시간 초기화
    while (millis() - startTime < 1000) {                                //글자 유지 시간
      for (byte j = 0; j < 8; j++) {                                     // row 위치 조정
        for (byte k = 0; k < 8; k++) {                                   // col 위치 조정
          boolean a = !patterns[i][j][k];                                // (i+k)/8: 열 한칸씩 이동, (i+k)%8: 이동만큼 열위치 회전
          digitalWrite(cols[k], a);                                      // col 핀 제어
        }
        digitalWrite(rows[j], HIGH);  // row 핀 제어
        delay(1);
        digitalWrite(rows[j], LOW);
      }
    }
  }
}